
- ID3DBlob
  쉐이더 코드를 이진 데이터로 변형했을 때, 그것을 그래픽 카드가 내부에 숨기고 이 ID3DBlob포인터를 우리에게 제공함

- HLSL
  DirectX 초기 버전은 정해진 함수만 사용했다. Mesh 생성하고 Merterial 정하면 화면에 나오는 정도.
  다렉이 발전하며 기능이 추가되기도 하고, 사용자들이 원하는 기능들도 추가됐다.
  여기서 Texture를 여러 개 넣거나 다른 색으로 출력하고 싶은 기능들을 원하게 됐는데,
  이를 위해서 PixelShader, VertexShader 단계의 함수를 짜서 넘겨주도록 하는 기능을 추가했다.
  이게 보통 우리가 세이더 셰이더 하는 것임

  프로젝트 로드에 포함되지 않는 부분에 셰이더 파일을 만들고, 특정 Texture 파일은 셰이더가 적용된 상태로 출력되게 하는 것
  경로 탐색 후 로드하는 함수는 선생님이 만들어줄 예정

- 확장자는 HLSL과 FX가 있는데, 큰 의미는 없다.
  옛날의 셰이더 확장자명이 FX,
  의미부여 할 필요 없음

- 비주얼 스튜디오 탭의 [확장(X)]를 누르면 [확장 관리]를 확인할 수 있다.
  현재 만들어진 HLSL 파일은 컴파일러가 적용되지 않았지만, 여기서 우측 상단에 "HLSL"을 검색한 뒤 파일을 다운로드 받으면
  HLSL 에서도 활용 가능한 인텔리센스 기능을 받아서 셰이더 코딩에 활용할 수 있다.




// 근데 내부는 뭔지 몰라~ 그래서 구조체로 알려줘야함
// 
// 버텍스 하나 들어왔다 > 어떻게 해줘~  이게 for문 돈다.
// 
// 버텍스 셰이더에서 프로젝션 해야 
// 레스터라이저에서 w 나누기를 할 수 있음 ( 뷰포트까지 곱해줌)
// w 나누기 할 때 사용할 z값이 프로젝션 이후 담기기 때문
// 
// Color도 여러 개 넣어줄 수 있으니 Color[n]이 뜸
// SV_Position << 레스터라이져한테 이 포지션이 w 나눈 후 뷰포트 곱하고 픽셀 건져낼 때 쓸 포지션 정보를 내가 보낸 것이라고 알려주는것
// 
// 속성 " 진입점 이름 main 지워버리기
// 셰이더는 빌드에 포함 안댐