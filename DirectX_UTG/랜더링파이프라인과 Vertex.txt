
 - 일반적인 랜더링 파이프라인

   모니터는 픽셀의 집합이며 우리는 전혀 보이진 않지만 개념상 월드라는 것(x, y, z로 이뤄진 세상)을 만들어 모니터에 출력하고자 한다.
   어떤 세상에 존재(아직 Mesh라는 것이 없는 것)가 있다는 것을 표현하려고 한다면, 우리 엔진에서는 이를 GameEngineTransform이 도와준다.
   어떤 점이 있다면, 이 점은 점이 바라보는 방향, 점의 위치, 점의 회전 값에 대한 집합(Worldmatrix)을 가지고 있다.
   이 정보만으로는 화면에 출력될 수 없다.
   그렇기 때문에 이 점(vertex)들을 모아(연결) 삼각형(mesh)로 만든다.
   이 삼각형의 각 점들이 우리가 만든 Worldmatrix(행렬)에 영향을 받게 된다.

   삼각형이 화면 가운데에 존재한다고 가정해보자.
   이것이 Worldmatrix에 영향을 받을 경우 크자이공부가 적용된다.
   또한 화면에 출력하기 위해 카메라를 하나 만든다.
   카메라는 화각, near, far 등의 정보를 갖고 뷰 -> 프로젝션 -> 뷰포트 작업을 한 뒤 모니터에 삼각형을 띄운다.
   이때 카메라가 정보를 통해 물체를 화면에 띄우기 전, 물체를 담는 공간을 피라미드(프로스텀)이라고 한다.
   프로스텀 안에 mesh를 가진 존재가 들어오면 뷰포트가 곱해지면서 화면에 위치하게 되는 것이다.
   프로스텀에 포함되지 않는 것들은 화면에 표시되지 않는다.
 
 - Direct의 랜더링 파이프라인

   GameEngineBase의 랜파.jpg를 보면서 확인
   맨 처음 단계 Input Assembler는 점을 준비하라는 뜻이다.
   화살표로 연결된 것, 오른쪽은 구조체, 왼쪽은 리소스이다.

   최초에 화면에 점이 위치한다면, 이건 점이 Worldmatrix를 통해 위치만 결정된 것이다.
   아직 색에 대한 정보는 담고 있지 않다.
   사실 점은 위치 뿐만 아니라 여러 정보를 담을 수 있는데, 두 번째로 중요한 것이 바로 색깔 정보이다.
   화면에 특정 색을 갖는 존재가 표현된다면, 색을 가지고 있다. 이 색을 표현하기 위한 정보를 점이 가지고 있으며 안티얼라이어싱을 통해 색을 결정하는 것이다.
   이 점들을 만들어서 DirectX에게 전달해야 한다.

   지금까지는 점의 위치만 보낸 것이다. 물론 위치 정보는 필수이기 때문에 보내야 한다.
   
   이를 위해 GameEngineVertex를 추가하여 내부에 float4 Vertex, float4 Color를 추가한다.

 - 인스턴스 버퍼
   Input Assembler에 화살표 왼쪽으로 연결된 부분에서 인스턴스 버퍼란, DirectX에 자신이 넣은 점들의 갯수와, 그걸 어떤 순서로 그릴지에 대한 정보를 넘겨줘야 한다.
   사실 Direct에서는 mesh라는 개념이 없다. 사람들이 그저 vertext와 instance가 합쳐진 상태를 mesh라고 부를 뿐이다. Direct에서는 둘이 합쳐진 상태를 버텍스 버퍼라고 부른다.
   아무튼 mesh(버텍스버퍼)는 버텍스와 인스턴스 버퍼로 이뤄져 있고, 점만 놓여져 있는 것이라면 이 점을 그리는 것이 인스턴스 버퍼이다.
 
 지금까지는 점의 위치만 보낸 것임(위치는 물론 필수)
 점에는 위치 뿐만 아니라 여러 정보를 담을 수 있다.
 
 리소스에 GameEngineVertex 추가
 인스턴스 버퍼 == 다이렉트X에 자신이 넣은 점들의 갯수와, 그걸 어떤 순서로 그릴 지 정보를 넘겨줘야함
 매쉬는 버텍스와 인스턴스 버퍼로 이뤄짐
 초반에는 사실 버텍스랑 인스턴스 두개 합쳐진 상태를 매쉬라고 부르지도 않음
 사람들끼리 매쉬라고 부르기로 약속한 단어임
 다렉에서는 버텍스버퍼라고 부른다. 점만 놓고 보면
 이 점을 그리는 건 인스턴스 버퍼라고 한다.
